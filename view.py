import asyncio
from aiogram import types
import random
import model
from bot import bot

async def helloUser(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç! üëã\n'
                           f'–≠—Ç–æ –∏–≥—Ä–∞ –≤ –∫–æ–Ω—Ñ–µ—Ç—ã. üç¨ \n'
                           f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏ /rules '
                           f'–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã. üòâ')

async def goodbye(message: types.Message):
    await bot.send_message(message.from_user.id,
                        f'{message.from_user.first_name}, '
                        f'–ø–æ–∫–∞! üëã')

async def regulations(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'–£ –Ω–∞—Å –µ—Å—Ç—å {model.getCandies()} –∫–æ–Ω—Ñ–µ—Çüç¨.\n'
                           '–ú—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä–µ–º –∫–æ–Ω—Ñ–µ—Ç—ã.\n'
                           f'–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º {model.maxCandy()} –∫–æ–Ω—Ñ–µ—Ç.\n'
                           '–í—ã–π–≥—Ä–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã!\n')
    await asyncio.sleep(5)
    await bot.send_message(message.from_user.id,
                           '–ü–æ–¥–∫–∏–Ω–µ–º –º–æ–Ω–µ—Ç–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ç—ã –ø–µ—Ä–≤—ã–π.'
                           ' –ù–∞–∂–º–∏ /go –∏ –º–æ–Ω–µ—Ç–∞ —Å–¥–µ–ª–∞–µ—Ç –≤—ã–±–æ—Ä.')

async def goGame(message: types.Message):
    model.total_candies = 150
    count = random.randint(0, 1)
    if count:
        await bot.send_message(message.from_user.id,
                           '–¢–∞–∫ –∏ –±—ã—Ç—å –¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥.üòë')
        await moveUser(message)
    else:
        await bot.send_message(message.from_user.id,
                               '–Ø —Ö–æ–∂—É –ø–µ—Ä–≤—ã–π. üòé')
        await moveBot(message)

async def moveUser(message: types.Message):
    user = message.text
    model.setPlayer(user)
    if (message.text).isdigit():
        if int(user) > model.maxCandy():
            await bot.send_message(message.from_user.id,
                                   f'–≠–π, —Ç—ã –≤–∑—è–ª(a) —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –Ω–µ –±–æ–ª—å—à–µ {model.maxCandy()}! üò°')
        elif int(user) < model.minCandy():
            await bot.send_message(message.from_user.id,
                                   '–ù–∏—á–µ–≥–æ –Ω–µ –±—Ä–∞—Ç—å —Ç–æ–∂–µ –Ω–µ–ª—å–∑—è! ü§®')
        else:
            total_count = model.getCandies()
            take_user = int(message.text)
            leftover = total_count - take_user
            await bot.send_message(message.from_user.id,
                                   f'{message.from_user.first_name}, —Ç—ã –≤–∑—è–ª(–∞) {take_user} –∫–æ–Ω—Ñ–µ—Ç,'
                                   f' –æ—Å—Ç–∞–ª–æ—Å—å {leftover}.')
            if model.checkWinner(leftover):
                await asyncio.sleep(1)
                await bot.send_message(message.from_user.id,
                                       '–Ø –≤—ã–π–≥—Ä–∞–ª! ü•≥\n'
                                       '–ü—Ä–∏—è—Ç–Ω–æ –∏–º–µ—Ç—å —Å —Ç–æ–±–æ–π –¥–µ–ª–æ!üòâ')
                await bot.send_message(message.from_user.id,
                                       'üç¨üç¨üç¨üç¨üç¨üç¨GAME OVERüç¨üç¨üç¨üç¨üç¨üç¨')
                await asyncio.sleep(2)
                await bot.send_message(message.from_user.id,
                                       '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /go üòè\n'
                                       '–ª–∏–±–æ /finish –∏ –º—ã –ø–æ–ø—Ä–æ—â–∞–µ–º—Å—è.üò©')
                return

            model.setCandies(leftover)
            await moveBot(message)

async def moveBot(message: types.Message):
    candies = model.getCandies()
    if candies < 29:
        take = candies
    else:
        take = random.randint(1, 28)
    leftover = candies - take
    await bot.send_message(message.from_user.id,
                           '–•–º–º...–¥–∞–π –ø–æ–¥—É–º–∞—Ç—å.ü§î')
    await asyncio.sleep(3)
    await bot.send_message(message.from_user.id,
                               f'–Ø –≤–∑—è–ª {take} –∫–æ–Ω—Ñ–µ—Ç, –æ—Å—Ç–∞–ª–æ—Å—å {leftover}.')
    if model.checkWinner(leftover):
        await asyncio.sleep(1)
        await bot.send_message(message.from_user.id,
                               f'{message.from_user.first_name}, '
                               f'—Ç—ã –≤—ã–π–≥—Ä–∞–ª(–∞)!üò≠\n'
                               f'–Ø –∫–æ–Ω–µ—á–Ω–æ —Ä–∞–¥ –∑–∞ —Ç–µ–±—è, –Ω–æ –Ω–µ –æ—Ç –≤—Å–µ–π –¥—É—à–∏...\n'
                               f'–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–≤–∞–Ω—à?ü•∫')
        await bot.send_message(message.from_user.id,
                               'üç¨üç¨üç¨üç¨üç¨üç¨GAME OVERüç¨üç¨üç¨üç¨üç¨üç¨')
        await asyncio.sleep(2)
        await bot.send_message(message.from_user.id,
                               '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /go üòè\n'
                               '–ª–∏–±–æ /finish –∏ –º—ã –ø–æ–ø—Ä–æ—â–∞–µ–º—Å—è.üòû')
        return

    model.setCandies(leftover)
    await nextMove(message)


async def nextMove(message: types.Message):
    await bot.send_message(message.from_user.id, f'{message.from_user.first_name}, '
                                                 '–Ω–∞–¥–µ—é—Å—å —Ç—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥—É–º–∞–ª(–∞)? üß†\n'
                                                 '–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥.')